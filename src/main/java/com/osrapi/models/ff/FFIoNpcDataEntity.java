package com.osrapi.models.ff;

import java.util.Map;

import javax.persistence.CollectionTable;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.MapKeyColumn;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * @author drau
 */
@JsonInclude(JsonInclude.Include.NON_EMPTY)
@Entity
@Table(name = "io_npc_data", schema = "ff")
public final class FFIoNpcDataEntity {
    @ElementCollection
    @CollectionTable(name = "io_npc_data_attributes_lookup",
            schema = "ff", joinColumns = @JoinColumn(name = "io_npc_data_id"))
    @MapKeyColumn(name = "key")
    @Column(name = "value")
    @JsonProperty("attributes")
    private Map<String, Integer> attributes;
    /** the behavior. */
    @Column(name = "behavior")
    @JsonProperty("behavior")
    @NotNull
    private long behavior;
    /** the behaviorParam. */
    @Column(name = "behavior_param")
    @JsonProperty("behavior_param")

    private Float behaviorParam;
    /** the climbCount. */
    @Column(name = "climb_count")
    @JsonProperty("climb_count")

    private Float climbCount;

    /** the collidState. */
    @Column(name = "collid_state")
    @JsonProperty("collid_state")

    private Long collidState;
    /** the collidTime. */
    @Column(name = "collid_time")
    @JsonProperty("collid_time")

    private Long collidTime;
    /** the critical. */
    @Column(name = "critical")
    @JsonProperty("critical")

    private Float critical;

    /** the cut. */
    @Column(name = "cut")
    @JsonProperty("cut")

    private Boolean cut;
    /** the cuts. */
    @Column(name = "cuts")
    @JsonProperty("cuts")

    private Long cuts;
    /** the damages. */
    @Column(name = "damages")
    @JsonProperty("damages")

    private Float damages;

    /** the gender. */
    @ManyToOne(targetEntity = FFGenderEntity.class, fetch = FetchType.EAGER)
    @Fetch(FetchMode.SELECT)
    @JoinColumn(name = "gender")
    @JsonProperty("gender")
    @NotNull
    private FFGenderEntity gender;
    /**
     * the primary key - an autogenerated id (unique for each user in the db).
     */
    @Id
    @Column(name = "io_npc_data_id")
    @GeneratedValue(strategy = GenerationType.SEQUENCE,
            generator = "io_npc_data_seq")
    @SequenceGenerator(
            name = "io_npc_data_seq",
            sequenceName = "ff.io_npc_data_id_seq",
            allocationSize = 1)
    private Long id;
    /** the internalScript. */
    @Column(name = "internal_script")
    @JsonProperty("internal_script")

    private String internalScript;

    /** the life. */
    @Column(name = "life")
    @JsonProperty("life")

    private Float life;
    /** the mana. */
    @Column(name = "mana")
    @JsonProperty("mana")

    private Float mana;
    /** the maxlife. */
    @Column(name = "maxlife")
    @JsonProperty("maxlife")

    private Float maxlife;

    /** the maxmana. */
    @Column(name = "maxmana")
    @JsonProperty("maxmana")

    private Float maxmana;
    /** the name. */
    @Column(name = "name")
    @JsonProperty("name")
    @NotNull
    private String name;
    /** the npcFlags. */
    @Column(name = "npc_flags")
    @JsonProperty("npc_flags")

    private Long npcFlags;

    @ElementCollection
    @CollectionTable(name = "io_npc_data_scripted_events_lookup",
            schema = "ff", joinColumns = @JoinColumn(name = "io_npc_data_id"))
    @MapKeyColumn(name = "key")
    @Column(name = "value")
    @JsonProperty("scripted_events")
    private Map<String, String> scriptedEvents;
    /** the title. */
    @Column(name = "title")
    @JsonProperty("title")
    @NotNull
    private String title;
    /** the xpvalue. */
    @Column(name = "xpvalue")
    @JsonProperty("xpvalue")

    private Long xpvalue;

    /** Creates a new instance of {@link FFIoNpcDataEntity}. */
    public FFIoNpcDataEntity() {
        super();
    }
    /**
     * Gets the map of attributes.
     * @return {@link Map}<{@link String}, {@link Integer}>
     */
    public Map<String, Integer> getAttributes() {
        return attributes;
    }
    /**
     * Gets the behavior.
     * @return {@link long}
     */
    public long getBehavior() {
        return behavior;
    }

    /**
     * Gets the behaviorParam.
     * @return {@link Float}
     */
    public Float getBehaviorParam() {
        return behaviorParam;
    }
    /**
     * Gets the climbCount.
     * @return {@link Float}
     */
    public Float getClimbCount() {
        return climbCount;
    }
    /**
     * Gets the collidState.
     * @return {@link Long}
     */
    public Long getCollidState() {
        return collidState;
    }

    /**
     * Gets the collidTime.
     * @return {@link Long}
     */
    public Long getCollidTime() {
        return collidTime;
    }
    /**
     * Gets the critical.
     * @return {@link Float}
     */
    public Float getCritical() {
        return critical;
    }
    /**
     * Gets the cut.
     * @return {@link Boolean}
     */
    public Boolean getCut() {
        return cut;
    }

    /**
     * Gets the cuts.
     * @return {@link Long}
     */
    public Long getCuts() {
        return cuts;
    }
    /**
     * Gets the damages.
     * @return {@link Float}
     */
    public Float getDamages() {
        return damages;
    }
    /**
     * Gets the gender.
     * @return {@link FFGenderEntity}
     */
    public FFGenderEntity getGender() {
        return gender;
    }

    /**
     * Gets the id.
     * @return {@link Long}
     */
    public Long getId() {
        return id;
    }
    /**
     * Gets the internalScript.
     * @return {@link String}
     */
    public String getInternalScript() {
        return internalScript;
    }
    /**
     * Gets the life.
     * @return {@link Float}
     */
    public Float getLife() {
        return life;
    }

    /**
     * Gets the mana.
     * @return {@link Float}
     */
    public Float getMana() {
        return mana;
    }
    /**
     * Gets the maxlife.
     * @return {@link Float}
     */
    public Float getMaxlife() {
        return maxlife;
    }
    /**
     * Gets the maxmana.
     * @return {@link Float}
     */
    public Float getMaxmana() {
        return maxmana;
    }

    /**
     * Gets the name.
     * @return {@link String}
     */
    public String getName() {
        return name;
    }
    /**
     * Gets the npcFlags.
     * @return {@link Long}
     */
    public Long getNpcFlags() {
        return npcFlags;
    }
    /**
     * Gets the map of scriptedEventss.
     * @return {@link Map}<{@link String}, {@link String}>
     */
    public Map<String, String> getScriptedEvents() {
        return scriptedEvents;
    }

    /**
     * Gets the title.
     * @return {@link String}
     */
    public String getTitle() {
        return title;
    }
    /**
     * Gets the xpvalue.
     * @return {@link Long}
     */
    public Long getXpvalue() {
        return xpvalue;
    }
    /**
     * Sets the mapping for attributes.
     * @param val the new value
     */
    public void setAttributes(Map<String, Integer> val) {
        attributes = val;
    }

    /**
     * Sets the behavior.
     * @param val the new value
     */
    public void setBehavior(final long val) {
        behavior = val;
    }
    /**
     * Sets the behaviorParam.
     * @param val the new value
     */
    public void setBehaviorParam(final Float val) {
        behaviorParam = val;
    }
    /**
     * Sets the climbCount.
     * @param val the new value
     */
    public void setClimbCount(final Float val) {
        climbCount = val;
    }

    /**
     * Sets the collidState.
     * @param val the new value
     */
    public void setCollidState(final Long val) {
        collidState = val;
    }
    /**
     * Sets the collidTime.
     * @param val the new value
     */
    public void setCollidTime(final Long val) {
        collidTime = val;
    }
    /**
     * Sets the critical.
     * @param val the new value
     */
    public void setCritical(final Float val) {
        critical = val;
    }

    /**
     * Sets the cut.
     * @param val the new value
     */
    public void setCut(final Boolean val) {
        cut = val;
    }
    /**
     * Sets the cuts.
     * @param val the new value
     */
    public void setCuts(final Long val) {
        cuts = val;
    }
    /**
     * Sets the damages.
     * @param val the new value
     */
    public void setDamages(final Float val) {
        damages = val;
    }

    /**
     * Sets the gender.
     * @param val the new value
     */
    public void setGender(final FFGenderEntity val) {
        gender = val;
    }
    /**
     * Sets the id.
     * @param val the new value
     */
    public void setId(final Long val) {
        id = val;
    }
    /**
     * Sets the internalScript.
     * @param val the new value
     */
    public void setInternalScript(final String val) {
        internalScript = val;
    }

    /**
     * Sets the life.
     * @param val the new value
     */
    public void setLife(final Float val) {
        life = val;
    }
    /**
     * Sets the mana.
     * @param val the new value
     */
    public void setMana(final Float val) {
        mana = val;
    }
    /**
     * Sets the maxlife.
     * @param val the new value
     */
    public void setMaxlife(final Float val) {
        maxlife = val;
    }

    /**
     * Sets the maxmana.
     * @param val the new value
     */
    public void setMaxmana(final Float val) {
        maxmana = val;
    }
    /**
     * Sets the name.
     * @param val the new value
     */
    public void setName(final String val) {
        name = val;
    }
    /**
     * Sets the npcFlags.
     * @param val the new value
     */
    public void setNpcFlags(final Long val) {
        npcFlags = val;
    }

    /**
     * Sets the mapping for scriptedEventss.
     * @param val the new value
     */
    public void setScriptedEvents(Map<String, String> val) {
        scriptedEvents = val;
    }
    /**
     * Sets the title.
     * @param val the new value
     */
    public void setTitle(final String val) {
        title = val;
    }
    /**
     * Sets the xpvalue.
     * @param val the new value
     */
    public void setXpvalue(final Long val) {
        xpvalue = val;
    }

}
