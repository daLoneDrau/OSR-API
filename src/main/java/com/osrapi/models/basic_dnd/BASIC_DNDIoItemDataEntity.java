package com.osrapi.models.basic_dnd;

import java.util.List;
import java.util.Map;

import javax.persistence.CollectionTable;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToOne;
import javax.persistence.MapKeyColumn;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * @author drau
 */
@JsonInclude(JsonInclude.Include.NON_EMPTY)
@Entity
@Table(name = "io_item_data", schema = "basic_dnd")
public final class BASIC_DNDIoItemDataEntity {
	/**
	 * the primary key - an autogenerated id (unique for each user in the db).
	 */
	@Id
	@Column(name = "io_item_data_id")
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "io_item_data_seq")
	@SequenceGenerator(name = "io_item_data_seq", sequenceName = "basic_dnd.io_item_data_id_seq", allocationSize = 1)
	private Long							id;
	/** the weight. */
	@Column(name = "weight")
	@JsonProperty("weight")
	@NotNull
	private float							weight;
	/** the stealValue. */
	@Column(name = "steal_value")
	@JsonProperty("steal_value")

	private Long							stealValue;
	/** the stackSize. */
	@Column(name = "stack_size")
	@JsonProperty("stack_size")
	@NotNull
	private long							stackSize;

	/** the ringType. */
	@Column(name = "ring_type")
	@JsonProperty("ring_type")

	private Long							ringType;
	/** the price. */
	@Column(name = "price")
	@JsonProperty("price")
	@NotNull
	private float							price;
	/** the maxOwned. */
	@Column(name = "max_owned")
	@JsonProperty("max_owned")

	private Long							maxOwned;

	/** the lightValue. */
	@Column(name = "light_value")
	@JsonProperty("light_value")

	private Long							lightValue;
	/** the leftRing. */
	@Column(name = "left_ring")
	@JsonProperty("left_ring")

	private Boolean							leftRing;
	/** the name. */
	@Column(name = "name")
	@JsonProperty("name")
	@NotNull
	private String							name;

	/** the internalScript. */
	@Column(name = "internal_script")
	@JsonProperty("internal_script")
	@NotNull
	private String							internalScript;
	/** the foodValue. */
	@Column(name = "food_value")
	@JsonProperty("food_value")

	private Long							foodValue;
	/** the description. */
	@Column(name = "description")
	@JsonProperty("description")
	@NotNull
	private String							description;

	/** the damages. */
	@ManyToOne(targetEntity = BASIC_DNDDiceEntity.class, fetch = FetchType.EAGER)
	@Fetch(FetchMode.SELECT)
	@JoinColumn(name = "damages")

	private BASIC_DNDDiceEntity				damages;
	/** the count. */
	@Column(name = "count")
	@JsonProperty("count")

	private Long							count;
	/**
	 * the list of {@link BASIC_DNDObjectTypeEntity}s associated with this
	 * {@link BASIC_DNDIoItemDataEntity}.
	 */
	@OneToMany(targetEntity = BASIC_DNDObjectTypeEntity.class, fetch = FetchType.EAGER)
	@Fetch(FetchMode.SELECT)
	@JoinTable(name = "io_item_data_types_lookup", schema = "basic_dnd", joinColumns = @JoinColumn(name = "io_item_data_id", referencedColumnName = "io_item_data_id") , inverseJoinColumns = @JoinColumn(name = "object_type_id", referencedColumnName = "object_type_id") )
	@JsonProperty("types")
	private List<BASIC_DNDObjectTypeEntity>	types;

	/**
	 * the list of {@link BASIC_DNDGroupEntity}s associated with this
	 * {@link BASIC_DNDIoItemDataEntity}.
	 */
	@OneToMany(targetEntity = BASIC_DNDGroupEntity.class, fetch = FetchType.EAGER)
	@Fetch(FetchMode.SELECT)
	@JoinTable(name = "io_item_data_groups_lookup", schema = "basic_dnd", joinColumns = @JoinColumn(name = "io_item_data_id", referencedColumnName = "io_item_data_id") , inverseJoinColumns = @JoinColumn(name = "group_id", referencedColumnName = "group_id") )
	@JsonProperty("groups")
	private List<BASIC_DNDGroupEntity>		groups;
	@ElementCollection
	@CollectionTable(name = "io_item_data_modifiers_lookup", schema = "basic_dnd", joinColumns = @JoinColumn(name = "io_item_data_id") )
	@MapKeyColumn(name = "key")
	@Column(name = "value")
	@JsonProperty("modifiers")
	private Map<String, String>				modifiers;

	/** Creates a new instance of {@link BASIC_DNDIoItemDataEntity}. */
	public BASIC_DNDIoItemDataEntity() {
		super();
	}

	/**
	 * Gets the count.
	 * 
	 * @return {@link Long}
	 */
	public Long getCount() {
		return count;
	}

	/**
	 * Gets the damages.
	 * 
	 * @return {@link BASIC_DNDDiceEntity}
	 */
	public BASIC_DNDDiceEntity getDamages() {
		return damages;
	}

	/**
	 * Gets the description.
	 * 
	 * @return {@link String}
	 */
	public String getDescription() {
		return description;
	}

	/**
	 * Gets the foodValue.
	 * 
	 * @return {@link Long}
	 */
	public Long getFoodValue() {
		return foodValue;
	}

	/**
	 * Gets the list of groupss.
	 * 
	 * @return {@link List}<{@link BASIC_DNDGroupEntity}>
	 */
	public List<BASIC_DNDGroupEntity> getGroups() {
		return groups;
	}

	/**
	 * Gets the id.
	 * 
	 * @return {@link Long}
	 */
	public Long getId() {
		return id;
	}

	/**
	 * Gets the internalScript.
	 * 
	 * @return {@link String}
	 */
	public String getInternalScript() {
		return internalScript;
	}

	/**
	 * Gets the leftRing.
	 * 
	 * @return {@link Boolean}
	 */
	public Boolean getLeftRing() {
		return leftRing;
	}

	/**
	 * Gets the lightValue.
	 * 
	 * @return {@link Long}
	 */
	public Long getLightValue() {
		return lightValue;
	}

	/**
	 * Gets the maxOwned.
	 * 
	 * @return {@link Long}
	 */
	public Long getMaxOwned() {
		return maxOwned;
	}

	/**
	 * Gets the map of modifierss.
	 * 
	 * @return {@link Map}<{@link String}, {@link String}>
	 */
	public Map<String, String> getModifiers() {
		return modifiers;
	}

	/**
	 * Gets the name.
	 * 
	 * @return {@link String}
	 */
	public String getName() {
		return name;
	}

	/**
	 * Gets the price.
	 * 
	 * @return {@link float}
	 */
	public float getPrice() {
		return price;
	}

	/**
	 * Gets the ringType.
	 * 
	 * @return {@link Long}
	 */
	public Long getRingType() {
		return ringType;
	}

	/**
	 * Gets the stackSize.
	 * 
	 * @return {@link long}
	 */
	public long getStackSize() {
		return stackSize;
	}

	/**
	 * Gets the stealValue.
	 * 
	 * @return {@link Long}
	 */
	public Long getStealValue() {
		return stealValue;
	}

	/**
	 * Gets the list of types.
	 * 
	 * @return {@link List}<{@link BASIC_DNDObjectTypeEntity}>
	 */
	public List<BASIC_DNDObjectTypeEntity> getTypes() {
		return types;
	}

	/**
	 * Gets the weight.
	 * 
	 * @return {@link float}
	 */
	public float getWeight() {
		return weight;
	}

	/**
	 * Sets the count.
	 * 
	 * @param val
	 *            the new value
	 */
	public void setCount(final Long val) {
		count = val;
	}

	/**
	 * Sets the damages.
	 * 
	 * @param val
	 *            the new value
	 */
	public void setDamages(final BASIC_DNDDiceEntity val) {
		damages = val;
	}

	/**
	 * Sets the description.
	 * 
	 * @param val
	 *            the new value
	 */
	public void setDescription(final String val) {
		description = val;
	}

	/**
	 * Sets the foodValue.
	 * 
	 * @param val
	 *            the new value
	 */
	public void setFoodValue(final Long val) {
		foodValue = val;
	}

	/**
	 * Sets the list of groupss.
	 * 
	 * @param val
	 *            the new value
	 */
	public void setGroups(final List<BASIC_DNDGroupEntity> val) {
		groups = val;
	}

	/**
	 * Sets the id.
	 * 
	 * @param val
	 *            the new value
	 */
	public void setId(final Long val) {
		id = val;
	}

	/**
	 * Sets the internalScript.
	 * 
	 * @param val
	 *            the new value
	 */
	public void setInternalScript(final String val) {
		internalScript = val;
	}

	/**
	 * Sets the leftRing.
	 * 
	 * @param val
	 *            the new value
	 */
	public void setLeftRing(final Boolean val) {
		leftRing = val;
	}

	/**
	 * Sets the lightValue.
	 * 
	 * @param val
	 *            the new value
	 */
	public void setLightValue(final Long val) {
		lightValue = val;
	}

	/**
	 * Sets the maxOwned.
	 * 
	 * @param val
	 *            the new value
	 */
	public void setMaxOwned(final Long val) {
		maxOwned = val;
	}

	/**
	 * Sets the mapping for modifierss.
	 * 
	 * @param val
	 *            the new value
	 */
	public void setModifiers(Map<String, String> val) {
		modifiers = val;
	}

	/**
	 * Sets the name.
	 * 
	 * @param val
	 *            the new value
	 */
	public void setName(final String val) {
		name = val;
	}

	/**
	 * Sets the price.
	 * 
	 * @param val
	 *            the new value
	 */
	public void setPrice(final float val) {
		price = val;
	}

	/**
	 * Sets the ringType.
	 * 
	 * @param val
	 *            the new value
	 */
	public void setRingType(final Long val) {
		ringType = val;
	}

	/**
	 * Sets the stackSize.
	 * 
	 * @param val
	 *            the new value
	 */
	public void setStackSize(final long val) {
		stackSize = val;
	}

	/**
	 * Sets the stealValue.
	 * 
	 * @param val
	 *            the new value
	 */
	public void setStealValue(final Long val) {
		stealValue = val;
	}

	/**
	 * Sets the list of types.
	 * 
	 * @param val
	 *            the new value
	 */
	public void setTypes(final List<BASIC_DNDObjectTypeEntity> val) {
		types = val;
	}

	/**
	 * Sets the weight.
	 * 
	 * @param val
	 *            the new value
	 */
	public void setWeight(final float val) {
		weight = val;
	}

}
