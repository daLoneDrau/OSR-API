package com.osrapi.models.lablord;

import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * @author drau
 */
@JsonInclude(JsonInclude.Include.NON_EMPTY)
@Entity
@Table(name = "character_class", schema = "lablord")
public final class LABLORDCharacterClassEntity {
	/**
	 * the list of {@link LABLORDClassAbilityEntity}s associated with this
	 * {@link LABLORDCharacterClassEntity}.
	 */
	@OneToMany(targetEntity = LABLORDClassAbilityEntity.class, fetch = FetchType.EAGER)
	@Fetch(FetchMode.SELECT)
	@JoinTable(name = "character_class_abilities_lookup", schema = "lablord", joinColumns = @JoinColumn(name = "character_class_id", referencedColumnName = "character_class_id") , inverseJoinColumns = @JoinColumn(name = "class_ability_id", referencedColumnName = "class_ability_id") )
	@JsonProperty("abilities")
	private List<LABLORDClassAbilityEntity>			abilities;
	/** the description. */
	@Column(name = "description")
	@JsonProperty("description")
	@NotNull
	private String									description;
	/** the hitDice. */
	@Cascade({ CascadeType.ALL })
	@JsonProperty("hit_dice")
	@ManyToOne(optional = false, fetch = FetchType.LAZY)
	@NotNull
	private LABLORDDieRollEntity					hitDice;
	/**
	 * the primary key - an autogenerated id (unique for each user in the db).
	 */
	@Id
	@Column(name = "character_class_id")
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "character_class_seq")
	@SequenceGenerator(name = "character_class_seq", sequenceName = "lablord.character_class_id_seq", allocationSize = 1)
	private Long									id;

	/**
	 * the list of {@link LABLORDLanguageEntity}s associated with this
	 * {@link LABLORDCharacterClassEntity}.
	 */
	@OneToMany(targetEntity = LABLORDLanguageEntity.class, fetch = FetchType.EAGER)
	@Fetch(FetchMode.SELECT)
	@JoinTable(name = "character_class_languages_lookup", schema = "lablord", joinColumns = @JoinColumn(name = "character_class_id", referencedColumnName = "character_class_id") , inverseJoinColumns = @JoinColumn(name = "language_id", referencedColumnName = "language_id") )
	@JsonProperty("languages")
	private List<LABLORDLanguageEntity>				languages;
	/** the maxLevel. */
	@Column(name = "max_level")
	@JsonProperty("max_level")
	@NotNull
	private long									maxLevel;
	/** the name. */
	@Column(name = "name")
	@JsonProperty("name")
	@NotNull
	private String									name;

	/**
	 * the list of {@link LABLORDAbilityEntity}s associated with this
	 * {@link LABLORDCharacterClassEntity}.
	 */
	@OneToMany(targetEntity = LABLORDAbilityEntity.class, fetch = FetchType.EAGER)
	@Fetch(FetchMode.SELECT)
	@JoinTable(name = "character_class_prime_requisites_lookup", schema = "lablord", joinColumns = @JoinColumn(name = "character_class_id", referencedColumnName = "character_class_id") , inverseJoinColumns = @JoinColumn(name = "ability_id", referencedColumnName = "ability_id") )
	@JsonProperty("prime_requisites")
	private List<LABLORDAbilityEntity>				primeRequisites;
	/**
	 * the list of {@link LABLORDAbilityRequirementEntity}s associated with this
	 * {@link LABLORDCharacterClassEntity}.
	 */
	@OneToMany(targetEntity = LABLORDAbilityRequirementEntity.class, fetch = FetchType.EAGER)
	@Fetch(FetchMode.SELECT)
	@JoinTable(name = "character_class_requirements_lookup", schema = "lablord", joinColumns = @JoinColumn(name = "character_class_id", referencedColumnName = "character_class_id") , inverseJoinColumns = @JoinColumn(name = "ability_requirement_id", referencedColumnName = "ability_requirement_id") )
	@JsonProperty("requirements")
	private List<LABLORDAbilityRequirementEntity>	requirements;
	/** Creates a new instance of {@link LABLORDCharacterClassEntity}. */
	public LABLORDCharacterClassEntity() {
		super();
	}

	/**
	 * Gets the list of abilities.
	 * @return {@link List}<{@link LABLORDClassAbilityEntity}>
	 */
	public List<LABLORDClassAbilityEntity> getAbilities() {
		return abilities;
	}
	/**
	 * Gets the description.
	 * @return {@link String}
	 */
	public String getDescription() {
		return description;
	}
	/**
	 * Gets the hitDice.
	 * @return {@link LABLORDDieRollEntity}
	 */
	public LABLORDDieRollEntity getHitDice() {
		return hitDice;
	}

	/**
	 * Gets the id.
	 * @return {@link Long}
	 */
	public Long getId() {
		return id;
	}
	/**
	 * Gets the list of languages.
	 * @return {@link List}<{@link LABLORDLanguageEntity}>
	 */
	public List<LABLORDLanguageEntity> getLanguages() {
		return languages;
	}
	/**
	 * Gets the maxLevel.
	 * @return {@link long}
	 */
	public long getMaxLevel() {
		return maxLevel;
	}

	/**
	 * Gets the name.
	 * @return {@link String}
	 */
	public String getName() {
		return name;
	}
	/**
	 * Gets the list of primeRequisites.
	 * @return {@link List}<{@link LABLORDAbilityEntity}>
	 */
	public List<LABLORDAbilityEntity> getPrimeRequisites() {
		return primeRequisites;
	}
	/**
	 * Gets the list of requirementss.
	 * @return {@link List}<{@link LABLORDAbilityRequirementEntity}>
	 */
	public List<LABLORDAbilityRequirementEntity> getRequirements() {
		return requirements;
	}

	/**
	 * Sets the list of abilities.
	 * @param val the new value
	 */
	public void setAbilities(final List<LABLORDClassAbilityEntity> val) {
		abilities = val;
	}
	/**
	 * Sets the description.
	 * @param val the new value
	 */
	public void setDescription(final String val) {
		description = val;
	}
	/**
	 * Sets the hitDice.
	 * @param val the new value
	 */
	public void setHitDice(final LABLORDDieRollEntity val) {
		hitDice = val;
	}

	/**
	 * Sets the id.
	 * @param val the new value
	 */
	public void setId(final Long val) {
		id = val;
	}
	/**
	 * Sets the list of languages.
	 * @param val the new value
	 */
	public void setLanguages(final List<LABLORDLanguageEntity> val) {
		languages = val;
	}
	/**
	 * Sets the maxLevel.
	 * @param val the new value
	 */
	public void setMaxLevel(final long val) {
		maxLevel = val;
	}

	/**
	 * Sets the name.
	 * @param val the new value
	 */
	public void setName(final String val) {
		name = val;
	}
	/**
	 * Sets the list of primeRequisites.
	 * @param val the new value
	 */
	public void setPrimeRequisites(final List<LABLORDAbilityEntity> val) {
		primeRequisites = val;
	}
	/**
	 * Sets the list of requirementss.
	 * @param val the new value
	 */
	public void setRequirements(
			final List<LABLORDAbilityRequirementEntity> val) {
		requirements = val;
	}

}
